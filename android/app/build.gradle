plugins {
    id "com.android.application"
    id 'com.google.gms.google-services' // FlutterFire Configuration
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin" // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
}

def localProperties = new Properties()
def keystoreProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
def keystorePropertiesFile = rootProject.file('key.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode") ?: "1"
def flutterVersionName = localProperties.getProperty("flutter.versionName") ?: "1.0"

android {
    namespace = "top.tnxg.kyoumai"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "top.tnxg.kyoumai"
        minSdk = 28
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            println("keyAlias: ${keystoreProperties['keyAlias']}")
            keyPassword keystoreProperties['keyPassword']
            println("keyPassword: ${keystoreProperties['keyPassword']}")
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            println("storeFile: ${keystoreProperties['storeFile']}")
            storePassword keystoreProperties['storePassword']
            println("storePassword: ${keystoreProperties['storePassword']}")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source = "../.."
}